<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Enviroment | Sawasawato Web Hack Blog]]></title>
  <link href="http://sawasawato.github.io/blog/categories/enviroment/atom.xml" rel="self"/>
  <link href="http://sawasawato.github.io/"/>
  <updated>2015-01-24T01:31:34+09:00</updated>
  <id>http://sawasawato.github.io/</id>
  <author>
    <name><![CDATA[Sawasawato]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NVM Node.js 使い方]]></title>
    <link href="http://sawasawato.github.io/blog/2015/01/23/nvm/"/>
    <updated>2015-01-23T17:10:36+09:00</updated>
    <id>http://sawasawato.github.io/blog/2015/01/23/nvm</id>
    <content type="html"><![CDATA[<h2>Grunt入れる前のNode.Jsで気をつける事など</h2>

<!-- more-->


<p>もはやメジャーになった Node.js サーバーまでJSで書けるということで、色々話題の代物。<br/>
フロントエンドエンジニアでは、GruntやGulpでの環境で使用するのが多いと思う。<br/>
なので Grunt 寄りの環境で紹介する。</p>

<h2>Node.js とは？ 概要 特長</h2>

<ul>
<li>Node.js はサーバー・サイドの JavaScript インタープリター(サーバープログラム)</li>
<li>イベント駆動型プログラミング&hellip;らしい</li>
<li>大量の同時接続を高速に処理するのに向いている。ノンブロッキングI/O(非同期処理)というモデルで実現されている&hellip;らしい。</li>
<li>「スケーラブルなネットワーク・プログラムを作成するための簡単な方法を提供すること」が Node.js の第 1 の目標&hellip;らしい</li>
<li>拡張性が高く、小規模にも大規模にもで対応できる&hellip;らしい。</li>
<li>モジュールインストールで色々できる</li>
<li>シングルスレッドベースの非同期処理環境 シングルなのに「イベントループ」アーキテクチャ(構築、構造)で実現している&hellip;らしい</li>
<li>ローカルの開発環境向上にも使える。</li>
</ul>


<p>いろいろすごい事ができるらしいけど、私はローカル開発環境の向上をするばかりに使用。</p>

<p>Grunt とか Jade とか Coffee とか Sass とか</p>

<hr />

<h2>なぜNVMを使うのか？</h2>

<p>Node.jsはバージョンアップが盛んで、バージョンが違うと使えないものがあったりする。<br/>
バージョンを上げたり、落としたり、入れたり削除したりが面倒なので、<br/>
パッケージ管理できると、とても便利。<br/>
Ruby の rvm みたいなもの</p>

<hr />

<h2>NVM インストール</h2>

<p>1 git で NVM 落としてくる
<code>
git clone git://github.com/creationix/nvm.git ~/.nvm
</code>
2 nvm 有効化 ロード
2 nvm シェルから見えるようにする .zsh<em>(.zshrc、.zshenv) .bash_profileに追記
<code>
source ~/.nvm/nvm.sh
or
[[ -s "$HOME/.nvm/nvm.sh" ]] &amp;&amp; source "$HOME/.nvm/nvm.sh"
</code>
3 nvm デフォルトを設定する .zsh</em>(.zshrc、.zshenv) .bash_profileに追記
```
[[ -s &ldquo;$HOME/.nvm/nvm.sh&rdquo; ]] &amp;&amp; source &ldquo;$HOME/.nvm/nvm.sh&rdquo;</p>

<p>nvm use default
npm_dir=${NVM_PATH}_modules
export NODE_PATH=$npm_dir</p>

<p><code>
4 node.js インストール
</code>
nvm install v0.10
//0.10.0ではStreaming API が新しいらしい
```</p>

<p>以上。</p>

<p>NVMでなく、インストーラを使用した場合以下に追加され、PATHが追記される。<br/>
正直オススメしない。
<code>
/usr/local/bin/node
/usr/local/bin/npm
</code></p>

<h2>NVM 使い方 基本コマンド</h2>

<p>・インストール可能な Node.js のバージョンを確認
<code>
nvm ls-remote
</code>
・Node.js インストール  (0.10.0ではStreaming API が新しいらしい)
<code>
nvm install v0.10.24 //バージョン指定でインストール
nvm install v0.10 //0.10.x系 最新バージョンインストール
nvm install v0 //0.x系 最新バージョンインストール
</code>
・Node.js インストール済 バージョン一覧
<code>
nvm ls
</code>
・Node バージョン指定 有効化 (シェルプロファイルに基本バージョンを指定しないと、毎回指定)
<code>
nvm use v0.10
</code>
・node バージョン確認
<code>
node -v
node --version
</code>
・現在の バージョン確認
<code>
nvm current
</code>
・nvm use コマンドを指定する。 プロファイル記述でなく指定する
<code>
nvm alias default v0.10
</code>
・pakage.json から必要なライブラリをインストール
node_modudeDirectory に package_json で指定されたライブラリをインストール
<code>
npm install
</code>
・packge_json で実行する
```
{
  &ldquo;name&rdquo;: &ldquo;hoge&rdquo;,
  &ldquo;version&rdquo;: &ldquo;0.0.1&rdquo;,
  &ldquo;description&rdquo;: &ldquo;hoge!&rdquo;,
  &ldquo;main&rdquo;: &ldquo;server.js&rdquo;,
  &ldquo;scripts&rdquo;: {</p>

<pre><code>"test": "mocha test/**/*.test.js",
"start": "node server.js"
</code></pre>

<p>  }
<code>
・実行
</code>
npm start
or
npm server.js
<code>
・nvm と指定されたバージョンの Node.js がインストール済みの場合だけ設定を有効にする
</code>
if [[ -f ~/.nvm/nvm.sh ]]; then
  source ~/.nvm/nvm.sh</p>

<p>  if which nvm >/dev/null 2>&amp;1 ;then</p>

<pre><code>_nodejs_use_version="v0.4.0"
if nvm ls | grep -F -e "${_nodejs_use_version}" &gt;/dev/null 2&gt;&amp;1 ;then
  nvm use "${_nodejs_use_version}" &gt;/dev/null
  export NODE_PATH=${NVM_PATH}_modules${NODE_PATH:+:}${NODE_PATH}
fi
unset _nodejs_use_version
</code></pre>

<p>  fi
fi
```</p>

<hr />

<h2>Win Nvm設定</h2>

<p>以前 Win 環境で使わなければならなかった時に設定した方が良いと思ったこと<br/>
使用環境 Win-7 Professional mac-OSX</p>

<p>・nvmw を導入 (win版)
<code>
git clone git://github.com/hakobera/nvmw.git "C:\Users\ユーザ名\.nvmw"
</code></p>

<p>Winはいつも、ディレクトリが特殊で環境パスでいつも迷ってしまう。
.gem とか .ssh とか置く場所あたりが良いと思う</p>

<p>先にnpmから入れちゃったから面倒 npm のパスは下のような感じ
<code>
C:\Users\tsumiki\AppData\Roaming\npm
</code></p>

<p>・環境変数例
<code>
C:\Ruby200-x64\bin;C:\Ruby200\bin;C:\Users\tsumiki\AppData\Roaming\npm;C:\Users\sawasawato\.nvmw
</code></p>

<h3>cmd.exe 起動時、オートコマンド実行</h3>

<p>Node を nvmw で管理、Ruby を rvm で管理するときに、毎回コマンドを打つ手間があって面倒だったため<br/>
macはbashrcをいじればいいものの、Winだとかなり手間</p>

<p>方法はレジストリに設定。 (ふっ飛ばさないように)この方の記事がよい。 win7なので各自<br/>
これと同じようにすれば、rvmのデフォルト設定もできる。<br/>
でもバッチとか使う時にこれが原因でエラーが出た事もあった&hellip;</p>

<p>・windows でコマンドのエイリアス設定(DOSKEY)</p>

<p><a href="http://www.adminweb.jp/command/command/index2.html">http://www.adminweb.jp/command/command/index2.html</a></p>

<p><a href="http://c4se.hatenablog.com/entry/2012/10/19/230718">http://c4se.hatenablog.com/entry/2012/10/19/230718</a></p>

<p>・レジストリで起動パスを記述する<br/>
レジストリを立ち上げた後、右クリック修整で下のパスを記述<br/>
<code>
C:\Users\tsumiki\cmd_profile.bat  
</code></p>

<p>・バッチファイルで管理
<code>
C:\Users\tsumiki\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup
</code></p>

<h2>参考サイト</h2>

<ul>
<li><a href="http://nodejs.org/">http://nodejs.org/</a></li>
<li><a href="http://nodejs.jp/nodejs.org_ja/">http://nodejs.jp/nodejs.org_ja/</a></li>
<li><a href="http://itpro.nikkeibp.co.jp/article/COLUMN/20120725/411441/">http://itpro.nikkeibp.co.jp/article/COLUMN/20120725/411441/</a></li>
<li><a href="http://www.atmarkit.co.jp/ait/articles/1102/28/news105.html">http://www.atmarkit.co.jp/ait/articles/1102/28/news105.html</a></li>
<li><a href="http://www.ibm.com/developerworks/jp/opensource/library/os-nodejs/?cmp=dw&amp;cpb=dwope&amp;ct=dwrss&amp;cr=dwrss&amp;ccy=jp&amp;csr=060311">http://www.ibm.com/developerworks/jp/opensource/library/os-nodejs/?cmp=dw&amp;cpb=dwope&amp;ct=dwrss&amp;cr=dwrss&amp;ccy=jp&amp;csr=060311</a></li>
<li><a href="http://www.nodebeginner.org/index-jp.html">http://www.nodebeginner.org/index-jp.html</a></li>
<li><a href="http://gihyo.jp/dev/serial/01/nodejs/0001">http://gihyo.jp/dev/serial/01/nodejs/0001</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Home Brew 導入 セットアップ方法]]></title>
    <link href="http://sawasawato.github.io/blog/2015/01/23/homebrew/"/>
    <updated>2015-01-23T15:43:45+09:00</updated>
    <id>http://sawasawato.github.io/blog/2015/01/23/homebrew</id>
    <content type="html"><![CDATA[<h2>Macの開発環境を整えるのに便利な HomeBrew の導入と使い方</h2>

<!-- more-->


<h2>Home Brew とは？ 概要 特徴</h2>

<p>Mac OS X オペレーティングシステム上でソフトウェアの導入を単純化するパッケージ管理システム。<br/>
パッケージ管理システムとはこのパッケージのインストール（アンインストール）作業を一元的管理するもの。</p>

<p>パッケージとは実行ファイルや設定ファイル、ライブラリetcを一つのファイルとしてまとめているもの。<br/>
パッケージやライブラリの依存関係などが管理できて便利。</p>

<hr />

<h2>Home Brew 仕組み</h2>

<p>Homebrewでのパッケージは/usr/local/Cellarというディレクトリにインストールされる。<br/>
そしてインストール時にbinにリンクされるという仕組みになっているらしい。<br/>
Cellarにあれば、それを使い、無ければmacデフォルトの物を使う。<br/>
<code>
/usr/local/Cellar  コマンド実体
/usr/local/bin  コマンドのエイリアス
</code></p>

<p>しかし、Macデフォルトにある物の場合(gitとか)、設定しないとデフォルトのバージョンが使用される。</p>

<hr />

<h2>Home Brew インストール</h2>

<p>1 ターミナルを起動
<code>
Ctrl + Space → terminal
</code></p>

<p>2 インストールコマンドを実行  できればpathは本家サイトで確認
<code>
ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
</code></p>

<p>3 確認後インストール内容が表示される、再度Enterを押して進める</p>

<p>4 パスワード入力後Enterを押すとインストールが開始</p>

<h3>動作確認</h3>

<p>下のように表示されればOK
<code>
brew doctor
Your system is ready to brew
</code></p>

<h3>エラーが表示された場合</h3>

<p>homebrewの実行に必要なコマンドラインツールがインストールされていない場合、エイリアスだけ残ってしまった場合等がある。</p>

<p>```
brew update
brew prune</p>

<h2>```</h2>

<h2>Home brew 使い方 基本コマンド</h2>

<p>・パッケージ検索
<code>
brew -serch &lt;パッケージ名&gt;
</code></p>

<p>・パッケージインストール アンインストール
<code>
brew install &lt;パッケージ名&gt; #インストール
brew remove &lt;パッケージ名&gt; #アンインストール
</code></p>

<p>・パッケージの有効化と無効化
<code>
brew link &lt;パッケージ名&gt; #有効化
brew unlink &lt;パッケージ名&gt; #無効化
</code></p>

<p>・パッケージ一覧の更新 アップデート
<code>
brew update #formula を更新
brew upgrade #更新があるパッケージを再ビルド
</code></p>

<p>・インストールされたパッケージリストを表示
<code>
brew list
</code></p>

<p>・インストールの問題をチェック
<code>
brew doctor
</code></p>

<p>・brewの設定確認
<code>
brew --config
</code></p>

<p>・バージョンチェック (-v はversionでは無い)
<code>
brew -v (--verbose) brew --version
</code></p>

<p>・Home brew のパッケージリセット、Cellar内、全削除
<code>
brew uninstall `brew list`
</code></p>

<p>・デッドリンクになっているものを削除 Cellarのものだけを削除するとなる
<code>
brew prune
</code></p>

<p>・Homebrew をインストール
<code>
ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
</code></p>

<p>・Homebrew をアンインストール
<code>
cd `brew --prefix`
rm -rf Cellar
brew prune
rm `git ls-files`
rmdir Library/Homebrew Library/Aliases Library/Formula Library/Contributions
rm -rf .git
rm -rf ~/Library/Caches/Homebrew
</code></p>

<h2>Home brew インストール例</h2>

<p>本家サイトを参考にwgetをインストールする。</p>

<p><code>
brew install wget
</code></p>

<h3>wgetとは？</h3>

<p>wget とは、UNIXコマンドラインで HTTP や FTP 経由のファイル取得を行えるツール。</p>

<p><a href="http://tech.basicinc.jp/Mac/2014/04/20/mac_app_engineer/">http://tech.basicinc.jp/Mac/2014/04/20/mac_app_engineer/</a></p>

<hr />

<h2>Homebrewコマンド一覧</h2>

<p>brew install foo fooをインストール<br/>
brew install &mdash;HEAD foo fooのHEADバージョンをインストール<br/>
brew install &mdash;force &mdash;HEAD foo fooの新しいHEADバージョンをインストール<br/>
brew search インストール可能なすべてのformulaを表示<br/>
brew search foo インストール可能なformulaからfooを検索<br/>
brew search /foo/ 正規表現fooを検索<br/>
brew list インストール済みのformulaeを表示<br/>
brew list foo fooのインストールしたファイルを表示<br/>
brew info &mdash;github foo foo formulaのGithub履歴ページをブラウザで表示<br/>
brew info インストール済みのHomebrewパッケージのサマリーを表示<br/>
brew info foo インストール済みのfooのすべての情報を表示<br/>
brew home HomebrewのWebサイトをデフォルトブラウザで表示<br/>
brew home foo fooのWebサイトをデフォルトブラウザで表示<br/>
brew update HomebrewのformulaeとHomebrew自体をアップデート<br/>
brew remove foo fooのアンインストール<br/>
brew create [url] ダウンロード可能なファイルのURLのformulaを生成してBREWEDITORかEDITORで指定されているエディタで開く<br/>
brew create url-of-tarball &mdash;cache formulaを生成して、tarballをダウンロードする。md5をformulaテンプレートに追加する。<br/>
brew create &mdash;macports foo どのようにfooをインストールするか調べるために、MacPortsパッケージ検索ページでfooを検索する。<br/>
brew create &mdash;fink foo Finkで同様のことを行う。<br/>
brew edit foo formulaをHOMEBREWEDITORかEDITORで開く<br/>
brew link foo fooのインストールされたファイルのHomebrew prefixシンボリックリンク作成する。（Homebrewでインストールすると自動的に行われる。DIYインストールを行った場合に有用。<br/>
brew unlink foo Homebrew prefixシンボリックリンクを削除する。<br/>
brew prune Homebrewprefixからデッドシンボリックリンクを削除する。<br/>
brew outdated 利用可能なアップデートバージョンが存在するformulaを表示する。新しいバージョンをインストールするにはbrew install fooを実行する。<br/>
brew upgrade 利用可能なアップデートバージョンが存在するformulaをすべてアップグレードする。<br/>
brew &mdash;config Homebrewのシステム設定を表示する<br/>
brew &mdash;prefix Howebrew prefixのパスを表示する。(普通は /usr/local)<br/>
brew &mdash;prefix (formula) インストールされたformulaのパスを表示する。<br/>
brew &mdash;cellar Homebrew Cellarのパスを表示する。(普通は /usr/local/Cellar)<br/>
brew &mdash;cache Homebrew キャッシュダウンロードのパスを表示する。(普通は ~/Library/Caches/Homebrew)<br/>
brew doctor インストールの一般的な問題をチェックする。<br/>
brew audit すべてのformulaeのコードとスタイルの問題を検査する。<br/>
brew cleanup foo インストールしたすべてもしくは特定のformulaeの古いバージョンをcellarから削除する。すべての場合はbrew cleanupを実行する。</p>

<hr />

<h2>参考サイト</h2>

<ul>
<li><a href="http://brew.sh/">http://brew.sh/</a></li>
<li><a href="http://brew.sh/index_ja.html">http://brew.sh/index_ja.html</a></li>
<li><a href="http://www.tettori.net/post/1442/">http://www.tettori.net/post/1442/</a></li>
<li><a href="http://qiita.com/omega999/items/6f65217b81ad3fffe7e6">http://qiita.com/omega999/items/6f65217b81ad3fffe7e6</a></li>
<li><a href="http://qiita.com/b4b4r07/items/6efebc2f3d1cbbd393fc">http://qiita.com/b4b4r07/items/6efebc2f3d1cbbd393fc</a></li>
<li><a href="http://millkeyweb.com/installing-homebrew/">http://millkeyweb.com/installing-homebrew/</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
