<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Enviroment | Sawasawato Web Hack Blog]]></title>
  <link href="http://sawasawato.github.io/blog/categories/enviroment/atom.xml" rel="self"/>
  <link href="http://sawasawato.github.io/"/>
  <updated>2015-01-23T17:09:25+09:00</updated>
  <id>http://sawasawato.github.io/</id>
  <author>
    <name><![CDATA[Sawasawato]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Home Brew 導入方法]]></title>
    <link href="http://sawasawato.github.io/blog/2015/01/23/homebrew/"/>
    <updated>2015-01-23T15:43:45+09:00</updated>
    <id>http://sawasawato.github.io/blog/2015/01/23/homebrew</id>
    <content type="html"><![CDATA[<h2>Macの開発環境を整えるのに便利なHomeBrewの導入と使い方</h2>

<!-- more-->


<h2>Home Brew とは？</h2>

<p>Mac OS X オペレーティングシステム上でソフトウェアの導入を単純化するパッケージ管理システム。<br/>
パッケージ管理システムとはこのパッケージのインストール（アンインストール）作業を一元的管理するもの。</p>

<p>パッケージとは実行ファイルや設定ファイル、ライブラリetcを一つのファイルとしてまとめているもの。<br/>
パッケージやライブラリの依存関係などが管理できて便利。</p>

<hr />

<h2>Home Brew 仕組み</h2>

<p>Homebrewでのパッケージは/usr/local/Cellarというディレクトリにインストールされる。<br/>
そしてインストール時にbinにリンクされるという仕組みになっているらしい。<br/>
Cellarにあれば、それを使い、無ければmacデフォルトの物を使う。<br/>
<code>
/usr/local/Cellar  コマンド実体
/usr/local/bin  コマンドのエイリアス
</code></p>

<p>しかし、Macデフォルトにある物の場合(gitとか)、設定しないとデフォルトのバージョンが使用される。</p>

<hr />

<h2>Home Brew インストール</h2>

<p>1 ターミナルを起動
<code>
Ctrl + Space → terminal
</code></p>

<p>2 インストールコマンドを実行  できればpathは本家サイトで確認
<code>
ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
</code></p>

<p>3 確認後インストール内容が表示される、再度Enterを押して進める</p>

<p>4 パスワード入力後Enterを押すとインストールが開始</p>

<h3>動作確認</h3>

<p>下のように表示されればOK
<code>
brew doctor
Your system is ready to brew
</code></p>

<h3>エラーが表示された場合</h3>

<p>homebrewの実行に必要なコマンドラインツールがインストールされていない場合、エイリアスだけ残ってしまった場合等がある。</p>

<p>```
brew update
brew prune</p>

<h2>```</h2>

<h2>Home brew の基本動作</h2>

<p>・パッケージ検索
<code>
brew -serch &lt;パッケージ名&gt;
</code></p>

<p>・パッケージインストール アンインストール
<code>
brew install &lt;パッケージ名&gt; #インストール
brew remove &lt;パッケージ名&gt; #アンインストール
</code></p>

<p>・パッケージの有効化と無効化
<code>
brew link &lt;パッケージ名&gt; #有効化
brew unlink &lt;パッケージ名&gt; #無効化
</code></p>

<p>・パッケージ一覧の更新 アップデート
<code>
brew update #formula を更新
brew upgrade #更新があるパッケージを再ビルド
</code></p>

<p>・インストールされたパッケージリストを表示
<code>
brew list
</code></p>

<p>・インストールの問題をチェック
<code>
brew doctor
</code></p>

<p>・brewの設定確認
<code>
brew --config
</code></p>

<p>・バージョンチェック (-v はversionでは無い)
<code>
brew -v (--verbose) brew --version
</code></p>

<p>・Home brew のパッケージリセット、Cellar内、全削除
<code>
brew uninstall `brew list`
</code></p>

<p>・デッドリンクになっているものを削除 Cellarのものだけを削除するとなる
<code>
brew prune
</code></p>

<p>・Homebrew をインストール
<code>
ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
</code></p>

<p>・Homebrew をアンインストール
<code>
cd `brew --prefix`
rm -rf Cellar
brew prune
rm `git ls-files`
rmdir Library/Homebrew Library/Aliases Library/Formula Library/Contributions
rm -rf .git
rm -rf ~/Library/Caches/Homebrew
</code></p>

<h2>Home brew インストール例</h2>

<p>本家サイトを参考にwgetをインストールする。</p>

<p><code>
brew install wget
</code></p>

<h3>wgetとは？</h3>

<p>wget とは、UNIXコマンドラインで HTTP や FTP 経由のファイル取得を行えるツール。</p>

<p><a href="http://tech.basicinc.jp/Mac/2014/04/20/mac_app_engineer/">http://tech.basicinc.jp/Mac/2014/04/20/mac_app_engineer/</a></p>

<hr />

<h2>Homebrewコマンド一覧</h2>

<p>brew install foo fooをインストール<br/>
brew install &mdash;HEAD foo fooのHEADバージョンをインストール<br/>
brew install &mdash;force &mdash;HEAD foo fooの新しいHEADバージョンをインストール<br/>
brew search インストール可能なすべてのformulaを表示<br/>
brew search foo インストール可能なformulaからfooを検索<br/>
brew search /foo/ 正規表現fooを検索<br/>
brew list インストール済みのformulaeを表示<br/>
brew list foo fooのインストールしたファイルを表示<br/>
brew info &mdash;github foo foo formulaのGithub履歴ページをブラウザで表示<br/>
brew info インストール済みのHomebrewパッケージのサマリーを表示<br/>
brew info foo インストール済みのfooのすべての情報を表示<br/>
brew home HomebrewのWebサイトをデフォルトブラウザで表示<br/>
brew home foo fooのWebサイトをデフォルトブラウザで表示<br/>
brew update HomebrewのformulaeとHomebrew自体をアップデート<br/>
brew remove foo fooのアンインストール<br/>
brew create [url] ダウンロード可能なファイルのURLのformulaを生成してBREWEDITORかEDITORで指定されているエディタで開く<br/>
brew create url-of-tarball &mdash;cache formulaを生成して、tarballをダウンロードする。md5をformulaテンプレートに追加する。<br/>
brew create &mdash;macports foo どのようにfooをインストールするか調べるために、MacPortsパッケージ検索ページでfooを検索する。<br/>
brew create &mdash;fink foo Finkで同様のことを行う。<br/>
brew edit foo formulaをHOMEBREWEDITORかEDITORで開く<br/>
brew link foo fooのインストールされたファイルのHomebrew prefixシンボリックリンク作成する。（Homebrewでインストールすると自動的に行われる。DIYインストールを行った場合に有用。<br/>
brew unlink foo Homebrew prefixシンボリックリンクを削除する。<br/>
brew prune Homebrewprefixからデッドシンボリックリンクを削除する。<br/>
brew outdated 利用可能なアップデートバージョンが存在するformulaを表示する。新しいバージョンをインストールするにはbrew install fooを実行する。<br/>
brew upgrade 利用可能なアップデートバージョンが存在するformulaをすべてアップグレードする。<br/>
brew &mdash;config Homebrewのシステム設定を表示する<br/>
brew &mdash;prefix Howebrew prefixのパスを表示する。(普通は /usr/local)<br/>
brew &mdash;prefix (formula) インストールされたformulaのパスを表示する。<br/>
brew &mdash;cellar Homebrew Cellarのパスを表示する。(普通は /usr/local/Cellar)<br/>
brew &mdash;cache Homebrew キャッシュダウンロードのパスを表示する。(普通は ~/Library/Caches/Homebrew)<br/>
brew doctor インストールの一般的な問題をチェックする。<br/>
brew audit すべてのformulaeのコードとスタイルの問題を検査する。<br/>
brew cleanup foo インストールしたすべてもしくは特定のformulaeの古いバージョンをcellarから削除する。すべての場合はbrew cleanupを実行する。</p>

<hr />

<h2>参考サイト</h2>

<ul>
<li><a href="http://brew.sh/">http://brew.sh/</a></li>
<li><a href="http://brew.sh/index_ja.html">http://brew.sh/index_ja.html</a></li>
<li><a href="http://www.tettori.net/post/1442/">http://www.tettori.net/post/1442/</a></li>
<li><a href="http://qiita.com/omega999/items/6f65217b81ad3fffe7e6">http://qiita.com/omega999/items/6f65217b81ad3fffe7e6</a></li>
<li><a href="http://qiita.com/b4b4r07/items/6efebc2f3d1cbbd393fc">http://qiita.com/b4b4r07/items/6efebc2f3d1cbbd393fc</a></li>
<li><a href="http://millkeyweb.com/installing-homebrew/">http://millkeyweb.com/installing-homebrew/</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
